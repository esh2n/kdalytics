@page "/channel/{ChannelId}/dashboard"
@using KDalytics.Web.Models
@using KDalytics.Web.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject PlayerApiClient PlayerApi
@inject MatchApiClient MatchApi
@inject PerformanceApiClient PerformanceApi

<PageTitle>KDalytics - チャンネルダッシュボード</PageTitle>

<div class="dashboard-container">
    @if (_isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">読み込み中...</span>
            </div>
            <p>データを読み込んでいます...</p>
        </div>
    }
    else if (_authError != null)
    {
        <div class="auth-error-container">
            <div class="alert alert-danger">
                <strong>認証エラー:</strong> @_authError
            </div>
            <button class="btn btn-primary" @onclick="NavigateToAuth">認証ページに戻る</button>
        </div>
    }
    else
    {
        <div class="dashboard-header">
            <h1>チャンネルダッシュボード</h1>
            <div class="channel-info">
                <span class="channel-id">チャンネルID: @ChannelId</span>
                <button class="btn btn-outline-danger btn-sm" @onclick="Logout">ログアウト</button>
            </div>
        </div>

        @if (_trackedPlayers == null || _trackedPlayers.Count == 0)
        {
            <div class="no-data-container">
                <h3>トラッキング中のプレイヤーがいません</h3>
                <p>Discordで「!player track &lt;名前&gt; &lt;タグ&gt;」コマンドを使用して、プレイヤーを追加してください。</p>
            </div>
        }
        else
        {
            <div class="player-list-container">
                <h2>トラッキング中のプレイヤー</h2>
                <div class="player-cards">
                    @foreach (var player in _trackedPlayers)
                    {
                        <div class="player-card">
                            <div class="player-card-header">
                                <h3>@player.DisplayName</h3>
                                <span class="region-badge">@player.Region</span>
                            </div>
                            <div class="player-card-body">
                                <p>アカウントレベル: @player.AccountLevel</p>
                                <p>最終更新: @player.LastUpdated.ToLocalTime().ToString("yyyy/MM/dd HH:mm")</p>
                                <button class="btn btn-primary" @onclick="() => ViewPlayerDetails(player.Puuid)">詳細を表示</button>
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (_playerStats != null && _playerStats.Count > 0)
            {
                <div class="stats-container">
                    <h2>プレイヤー統計</h2>
                    <div class="stats-period-selector">
                        <button class="btn @(_selectedPeriod == "week" ? "btn-primary" : "btn-outline-primary")"
                            @onclick='() => ChangePeriod("week")'>1週間</button>
                        <button class="btn @(_selectedPeriod == "month" ? "btn-primary" : "btn-outline-primary")"
                            @onclick='() => ChangePeriod("month")'>1ヶ月</button>
                        <button class="btn @(_selectedPeriod == "season" ? "btn-primary" : "btn-outline-primary")"
                            @onclick='() => ChangePeriod("season")'>シーズン</button>
                    </div>

                    <div class="stats-table-container">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>プレイヤー</th>
                                    <th>試合数</th>
                                    <th>勝率</th>
                                    <th>KDA</th>
                                    <th>K/D</th>
                                    <th>HS%</th>
                                    <th>最も使用したエージェント</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var stats in _playerStats.OrderByDescending(s => s.Value.KdaRatio))
                                {
                                    <tr @onclick="() => ViewPlayerDetails(stats.Key)">
                                        <td>@(_playerNames.TryGetValue(stats.Key, out var name) ? name : stats.Key)</td>
                                        <td>@stats.Value.MatchesPlayed</td>
                                        <td>@stats.Value.WinRateDisplay</td>
                                        <td>@stats.Value.KdaDisplay</td>
                                        <td>@stats.Value.KdRatioDisplay</td>
                                        <td>@stats.Value.HeadshotPercentageDisplay</td>
                                        <td>@stats.Value.MostPlayedAgent</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            @if (_recentMatches != null && _recentMatches.Count > 0)
            {
                <div class="recent-matches-container">
                    <h2>最近の試合</h2>
                    <div class="match-list">
                        @foreach (var match in _recentMatches)
                        {
                            <div class="match-card">
                                <div class="match-card-header">
                                    <h4>@match.MapName</h4>
                                    <span class="game-mode-badge">@match.GameMode</span>
                                </div>
                                <div class="match-card-body">
                                    <p>日時: @match.FormattedStartTime</p>
                                    <p>試合時間: @match.FormattedGameLength</p>
                                    <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => ViewMatchDetails(match.MatchId)">詳細を表示</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public string ChannelId { get; set; } = "";

    private List<PlayerModel>? _trackedPlayers;
    private List<MatchModel>? _recentMatches;
    private Dictionary<string, PerformanceStatsModel> _playerStats = new();
    private Dictionary<string, string> _playerNames = new();
    private bool _isLoading = true;
    private string? _authError;
    private string _selectedPeriod = "month";

    protected override async Task OnInitializedAsync()
    {
        await ValidateAuthAsync();
        if (_authError == null)
        {
            await LoadDataAsync();
        }
    }

    private async Task ValidateAuthAsync()
    {
        try
        {
            var token = await GetStoredTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                _authError = "認証が必要です。アクセスコードを入力してください。";
                return;
            }

            // TODO: 実際にはAPIを呼び出してトークンを検証する
            // 現在はモックの検証ロジック
            await Task.Delay(500); // APIリクエストをシミュレート
        }
        catch (Exception ex)
        {
            _authError = $"認証中にエラーが発生しました: {ex.Message}";
        }
    }

    private async Task LoadDataAsync()
    {
        _isLoading = true;
        try
        {
            // TODO: 実際にはチャンネルに関連付けられたプレイヤーを取得するAPIを呼び出す
            // 現在はすべてのトラッキング中のプレイヤーを取得
            _trackedPlayers = await PlayerApi.GetTrackedPlayersAsync();

            if (_trackedPlayers != null && _trackedPlayers.Count > 0)
            {
                // プレイヤー名のマッピングを作成
                foreach (var player in _trackedPlayers)
                {
                    _playerNames[player.Puuid] = player.DisplayName;
                }

                // 最近の試合を取得
                _recentMatches = await MatchApi.GetPlayerRecentMatchesAsync(_trackedPlayers[0].Puuid, 5);

                // 各プレイヤーの統計情報を取得
                await LoadPlayerStatsAsync();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"データ取得中にエラーが発生しました: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadPlayerStatsAsync()
    {
        if (_trackedPlayers == null) return;

        DateTime from = DateTime.UtcNow;
        switch (_selectedPeriod)
        {
            case "week":
                from = DateTime.UtcNow.AddDays(-7);
                break;
            case "season":
                from = DateTime.UtcNow.AddDays(-90);
                break;
            case "month":
            default:
                from = DateTime.UtcNow.AddDays(-30);
                break;
        }

        _playerStats.Clear();
        foreach (var player in _trackedPlayers)
        {
            try
            {
                var stats = await PerformanceApi.GetPlayerPerformanceStatsAsync(player.Puuid, from);
                if (stats != null)
                {
                    _playerStats[player.Puuid] = stats;
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"プレイヤー統計取得中にエラーが発生しました: {ex.Message}");
            }
        }
    }

    private async Task ChangePeriod(string period)
    {
        _selectedPeriod = period;
        await LoadPlayerStatsAsync();
    }

    private void ViewPlayerDetails(string puuid)
    {
        NavigationManager.NavigateTo($"/player/{puuid}");
    }

    private void ViewMatchDetails(string matchId)
    {
        NavigationManager.NavigateTo($"/match/{matchId}");
    }

    private void NavigateToAuth()
    {
        NavigationManager.NavigateTo($"/channel/{ChannelId}");
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", $"kdalytics_token_{ChannelId}");
        NavigateToAuth();
    }

    private async Task<string> GetStoredTokenAsync()
    {
        try
        {
            return await JSRuntime.InvokeAsync<string>("localStorage.getItem", $"kdalytics_token_{ChannelId}") ?? "";
        }
        catch
        {
            return "";
        }
    }
}

<style>
    .dashboard-container {
        padding: 20px;
    }

    .loading-container,
    .auth-error-container,
    .no-data-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 300px;
        text-align: center;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 1px solid #ddd;
    }

    .channel-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .channel-id {
        font-size: 0.9rem;
        color: #666;
    }

    .player-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .player-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .player-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .region-badge {
        background-color: #0f1923;
        color: white;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
    }

    .stats-container {
        margin-top: 30px;
    }

    .stats-period-selector {
        display: flex;
        gap: 10px;
        margin: 15px 0;
    }

    .stats-table-container {
        margin-top: 15px;
        overflow-x: auto;
    }

    .stats-table-container table tbody tr {
        cursor: pointer;
    }

    .stats-table-container table tbody tr:hover {
        background-color: #f5f5f5;
    }

    .recent-matches-container {
        margin-top: 30px;
    }

    .match-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 15px;
        margin-top: 15px;
    }

    .match-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 12px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .match-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .game-mode-badge {
        background-color: #ff4655;
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 0.7rem;
    }
</style>