@page "/"
@using KDalytics.Web.Models
@using KDalytics.Web.Services
@inject PlayerApiClient PlayerApi
@inject MatchApiClient MatchApi
@inject PerformanceApiClient PerformanceApi

<PageTitle>KDalytics - ダッシュボード</PageTitle>

<div class="dashboard-container">
    <h1 class="dashboard-title">KDalytics ダッシュボード</h1>

    @if (_isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">読み込み中...</span>
            </div>
            <p>データを読み込んでいます...</p>
        </div>
    }
    else if (_trackedPlayers == null || _trackedPlayers.Count == 0)
    {
        <div class="no-data-container">
            <h3>トラッキング中のプレイヤーがいません</h3>
            <p>プレイヤーを検索して追加してください。</p>
            <div class="search-container">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="プレイヤー名" @bind="_searchName" />
                    <input type="text" class="form-control" placeholder="タグ" @bind="_searchTag" />
                    <button class="btn btn-primary" @onclick="SearchPlayer" disabled="@(_isSearching)">
                        @if (_isSearching)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>検索中...</span>
                        }
                        else
                        {
                            <span>検索</span>
                        }
                    </button>
                </div>
                @if (_searchError != null)
                {
                    <div class="alert alert-danger">@_searchError</div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="player-list-container">
            <h2>トラッキング中のプレイヤー</h2>
            <div class="player-cards">
                @foreach (var player in _trackedPlayers)
                {
                    <div class="player-card">
                        <div class="player-card-header">
                            <h3>@player.DisplayName</h3>
                            <span class="region-badge">@player.Region</span>
                        </div>
                        <div class="player-card-body">
                            <p>アカウントレベル: @player.AccountLevel</p>
                            <p>最終更新: @player.LastUpdated.ToLocalTime().ToString("yyyy/MM/dd HH:mm")</p>
                            <button class="btn btn-primary" @onclick="() => ViewPlayerDetails(player.Puuid)">詳細を表示</button>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="search-container mt-4">
            <h2>プレイヤーを検索</h2>
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="プレイヤー名" @bind="_searchName" />
                <input type="text" class="form-control" placeholder="タグ" @bind="_searchTag" />
                <button class="btn btn-primary" @onclick="SearchPlayer" disabled="@(_isSearching)">
                    @if (_isSearching)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>検索中...</span>
                    }
                    else
                    {
                        <span>検索</span>
                    }
                </button>
            </div>
            @if (_searchError != null)
            {
                <div class="alert alert-danger">@_searchError</div>
            }
        </div>

        @if (_recentMatches != null && _recentMatches.Count > 0)
        {
            <div class="recent-matches-container mt-4">
                <h2>最近の試合</h2>
                <div class="match-list">
                    @foreach (var match in _recentMatches)
                    {
                        <div class="match-card">
                            <div class="match-card-header">
                                <h4>@match.MapName</h4>
                                <span class="game-mode-badge">@match.GameMode</span>
                            </div>
                            <div class="match-card-body">
                                <p>日時: @match.FormattedStartTime</p>
                                <p>試合時間: @match.FormattedGameLength</p>
                                <button class="btn btn-sm btn-outline-primary"
                                    @onclick="() => ViewMatchDetails(match.MatchId)">詳細を表示</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private List<PlayerModel>? _trackedPlayers;
    private List<MatchModel>? _recentMatches;
    private bool _isLoading = true;
    private bool _isSearching = false;
    private string? _searchError;
    private string _searchName = "";
    private string _searchTag = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTrackedPlayers();
        _isLoading = false;
    }

    private async Task LoadTrackedPlayers()
    {
        try
        {
            _trackedPlayers = await PlayerApi.GetTrackedPlayersAsync();
            if (_trackedPlayers != null && _trackedPlayers.Count > 0)
            {
                await LoadRecentMatches(_trackedPlayers[0].Puuid);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"プレイヤー一覧の取得中にエラーが発生しました: {ex.Message}");
        }
    }

    private async Task LoadRecentMatches(string puuid)
    {
        try
        {
            _recentMatches = await MatchApi.GetPlayerRecentMatchesAsync(puuid, 5);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"最近の試合の取得中にエラーが発生しました: {ex.Message}");
        }
    }

    private async Task SearchPlayer()
    {
        if (string.IsNullOrWhiteSpace(_searchName) || string.IsNullOrWhiteSpace(_searchTag))
        {
            _searchError = "プレイヤー名とタグを入力してください。";
            return;
        }

        _isSearching = true;
        _searchError = null;

        try
        {
            var player = await PlayerApi.SearchPlayerAsync(_searchName, _searchTag);
            if (player != null)
            {
                if (!player.IsTracked)
                {
                    await PlayerApi.UpdateTrackingAsync(player.Puuid, true);
                }
                await LoadTrackedPlayers();
            }
            else
            {
                _searchError = $"プレイヤー '{_searchName}#{_searchTag}' が見つかりませんでした。";
            }
        }
        catch (Exception ex)
        {
            _searchError = $"プレイヤーの検索中にエラーが発生しました: {ex.Message}";
        }
        finally
        {
            _isSearching = false;
        }
    }

    private void ViewPlayerDetails(string puuid)
    {
        // プレイヤー詳細ページへの遷移（実装予定）
        Console.WriteLine($"プレイヤー詳細: {puuid}");
    }

    private void ViewMatchDetails(string matchId)
    {
        // 試合詳細ページへの遷移（実装予定）
        Console.WriteLine($"試合詳細: {matchId}");
    }
}

<style>
    .dashboard-container {
        padding: 20px;
    }

    .dashboard-title {
        margin-bottom: 30px;
        color: #ff4655;
        /* Valorantのメインカラー */
    }

    .loading-container,
    .no-data-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 300px;
    }

    .player-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .player-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .player-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .region-badge {
        background-color: #0f1923;
        /* Valorantの暗い色 */
        color: white;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
    }

    .match-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 15px;
        margin-top: 15px;
    }

    .match-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 12px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .match-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .game-mode-badge {
        background-color: #ff4655;
        /* Valorantのメインカラー */
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 0.7rem;
    }
</style>
