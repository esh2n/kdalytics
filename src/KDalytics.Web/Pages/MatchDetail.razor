@page "/match/{MatchId}"
@using KDalytics.Web.Models
@using KDalytics.Web.Services
@inject MatchApiClient MatchApi
@inject NavigationManager NavigationManager

<PageTitle>KDalytics - 試合詳細</PageTitle>

<div class="match-detail-container">
    @if (_isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">読み込み中...</span>
            </div>
            <p>データを読み込んでいます...</p>
        </div>
    }
    else if (_match == null)
    {
        <div class="error-container">
            <h3>試合が見つかりません</h3>
            <p>指定された試合IDが見つかりませんでした。</p>
            <button class="btn btn-primary" @onclick="NavigateToHome">ホームに戻る</button>
        </div>
    }
    else
    {
        <div class="match-header">
            <div class="match-info">
                <h1>@_match.MapName</h1>
                <div class="match-details">
                    <span class="game-mode-badge">@_match.GameMode</span>
                    <span class="date-badge">@_match.FormattedStartTime</span>
                    <span class="time-badge">@_match.FormattedGameLength</span>
                </div>
            </div>
            <div class="match-actions">
                <button class="btn btn-outline-primary" @onclick="NavigateToHome">ホームに戻る</button>
            </div>
        </div>

        <div class="match-score">
            @{
                var team1 = _match.Teams.FirstOrDefault(t => t.TeamId == "Blue");
                var team2 = _match.Teams.FirstOrDefault(t => t.TeamId == "Red");
                var team1Score = team1?.RoundsWon ?? 0;
                var team2Score = team2?.RoundsWon ?? 0;
            }
            <div class="score-container">
                <div class="team-score @(team1?.HasWon == true ? "winner" : "")">
                    <span class="team-name">Blue</span>
                    <span class="score">@team1Score</span>
                </div>
                <div class="score-divider">:</div>
                <div class="team-score @(team2?.HasWon == true ? "winner" : "")">
                    <span class="score">@team2Score</span>
                    <span class="team-name">Red</span>
                </div>
            </div>
        </div>

        <div class="teams-container">
            <div class="team-section">
                <h3>Blue Team @(team1?.HasWon == true ? "(勝利)" : "")</h3>
                <div class="team-players">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>プレイヤー</th>
                                <th>エージェント</th>
                                <th>スコア</th>
                                <th>K/D/A</th>
                                <th>HS%</th>
                                <th>ダメージ</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var player in _match.Players.Where(p => p.TeamId == "Blue").OrderByDescending(p =>
                                                    p.Score))
                            {
                                <tr @onclick="() => NavigateToPlayerProfile(player.Puuid)" class="player-row">
                                    <td>@player.DisplayName</td>
                                    <td>@player.AgentName</td>
                                    <td>@player.Score</td>
                                    <td>@player.KdaDisplay</td>
                                    <td>@player.HeadshotPercentageDisplay</td>
                                    <td>@player.DamageDealt</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="team-section">
                <h3>Red Team @(team2?.HasWon == true ? "(勝利)" : "")</h3>
                <div class="team-players">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>プレイヤー</th>
                                <th>エージェント</th>
                                <th>スコア</th>
                                <th>K/D/A</th>
                                <th>HS%</th>
                                <th>ダメージ</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var player in _match.Players.Where(p => p.TeamId == "Red").OrderByDescending(p =>
                                                    p.Score))
                            {
                                <tr @onclick="() => NavigateToPlayerProfile(player.Puuid)" class="player-row">
                                    <td>@player.DisplayName</td>
                                    <td>@player.AgentName</td>
                                    <td>@player.Score</td>
                                    <td>@player.KdaDisplay</td>
                                    <td>@player.HeadshotPercentageDisplay</td>
                                    <td>@player.DamageDealt</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="match-stats">
            <h3>試合統計</h3>
            <div class="stats-cards">
                <div class="stats-card">
                    <h4>最高スコア</h4>
                    @{
                        var topScorer = _match.Players.OrderByDescending(p => p.Score).FirstOrDefault();
                    }
                    @if (topScorer != null)
                    {
                        <div class="stats-value">@topScorer.Score</div>
                        <div class="stats-subvalue">@topScorer.DisplayName (@topScorer.AgentName)</div>
                    }
                </div>
                <div class="stats-card">
                    <h4>最多キル</h4>
                    @{
                        var topKiller = _match.Players.OrderByDescending(p => p.Kills).FirstOrDefault();
                    }
                    @if (topKiller != null)
                    {
                        <div class="stats-value">@topKiller.Kills</div>
                        <div class="stats-subvalue">@topKiller.DisplayName (@topKiller.AgentName)</div>
                    }
                </div>
                <div class="stats-card">
                    <h4>最多アシスト</h4>
                    @{
                        var topAssister = _match.Players.OrderByDescending(p => p.Assists).FirstOrDefault();
                    }
                    @if (topAssister != null)
                    {
                        <div class="stats-value">@topAssister.Assists</div>
                        <div class="stats-subvalue">@topAssister.DisplayName (@topAssister.AgentName)</div>
                    }
                </div>
                <div class="stats-card">
                    <h4>最高HS率</h4>
                    @{
                        var topHeadshotter = _match.Players.OrderByDescending(p => p.HeadshotPercentage).FirstOrDefault();
                    }
                    @if (topHeadshotter != null)
                    {
                        <div class="stats-value">@topHeadshotter.HeadshotPercentageDisplay</div>
                        <div class="stats-subvalue">@topHeadshotter.DisplayName (@topHeadshotter.AgentName)</div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string MatchId { get; set; } = "";

    private MatchModel? _match;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadMatchData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(MatchId))
        {
            await LoadMatchData();
        }
    }

    private async Task LoadMatchData()
    {
        _isLoading = true;
        try
        {
            _match = await MatchApi.GetMatchByIdAsync(MatchId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"試合データの取得中にエラーが発生しました: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToPlayerProfile(string puuid)
    {
        NavigationManager.NavigateTo($"/player/{puuid}");
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}

<style>
    .match-detail-container {
        padding: 20px;
    }

    .loading-container,
    .error-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 300px;
    }

    .match-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .match-details {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }

    .game-mode-badge,
    .date-badge,
    .time-badge {
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    .game-mode-badge {
        background-color: #ff4655;
        color: white;
    }

    .date-badge {
        background-color: #0f1923;
        color: white;
    }

    .time-badge {
        background-color: #31c4f3;
        color: white;
    }

    .match-score {
        margin-bottom: 30px;
    }

    .score-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .team-score {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .team-name {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .score {
        font-size: 2.5rem;
        font-weight: bold;
    }

    .score-divider {
        font-size: 2rem;
        font-weight: bold;
    }

    .winner .team-name,
    .winner .score {
        color: #4caf50;
    }

    .teams-container {
        display: grid;
        grid-template-columns: 1fr;
        gap: 30px;
        margin-bottom: 30px;
    }

    @media
    (min-width: 992px) {
        .teams-container {
            grid-template-columns: 1fr 1fr;
        }
    }

    .team-section {
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .team-players {
        margin-top: 15px;
    }

    .player-row {
        cursor: pointer;
    }

    .player-row:hover {
        background-color: #e9ecef;
    }

    .match-stats {
        margin-top: 30px;
    }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 15px;
    }

    .stats-card {
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        text-align: center;
    }

    .stats-value {
        font-size: 1.5rem;
        font-weight: bold;
        margin: 10px 0;
    }

    .stats-subvalue {
        font-size: 0.9rem;
        color: #666;
    }
</style>